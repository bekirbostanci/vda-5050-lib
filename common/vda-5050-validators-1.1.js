// ----------------------------------------------------------------------------"
// This file was generated by a tool, do not modify it directly.
// ----------------------------------------------------------------------------

const validateConnection = (function() {
'use strict'
const hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);
const format0 = (input) => {
    if (input.length > 10 + 1 + 9 + 12 + 6) return false
    const full = /^\d\d\d\d-(?:0[1-9]|1[0-2])-(?:[0-2]\d|3[01])[t\s](?:2[0-3]|[0-1]\d):[0-5]\d:(?:[0-5]\d|60)(?:\.\d+)?(?:z|[+-](?:2[0-3]|[0-1]\d)(?::?[0-5]\d)?)$/i
    const feb = input[5] === '0' && input[6] === '2'
    if ((feb && input[8] === '3') || !full.test(input)) return false
    if (input[17] === '6') {
      const p = input.slice(11).match(/([0-9.]+|[^0-9.])/g)
      let hm = Number(p[0]) * 60 + Number(p[2])
      if (p[5] === '+') hm += 24 * 60 - Number(p[6] || 0) * 60 - Number(p[8] || 0)
      else if (p[5] === '-') hm += Number(p[6] || 0) * 60 + Number(p[8] || 0)
      if (hm % (24 * 60) !== 23 * 60 + 59) return false
    }
    if (feb) {
      if (/^\d\d\d\d-02-(?:[012][1-8]|[12]0|[01]9)/.test(input)) return true
      const matches = input.match(/^(\d\d\d\d)-02-29/)
      if (!matches) return false
      const year = matches[1] | 0
      return year % 16 === 0 || (year % 4 === 0 && year % 25 !== 0)
    }
    if (input[8] === '3' && input[9] === '1') return /^\d\d\d\d-(?:0[13578]|1[02])-31/.test(input)
    return /^\d\d\d\d-(?:0[13-9]|1[012])-(?:[012][1-9]|[123]0)/.test(input)
  };
const ref1 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("headerId" in data && hasOwn(data, "headerId"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/headerId" }]
    return false
  }
  if (!("timestamp" in data && hasOwn(data, "timestamp"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!("version" in data && hasOwn(data, "version"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/version" }]
    return false
  }
  if (!("manufacturer" in data && hasOwn(data, "manufacturer"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/manufacturer" }]
    return false
  }
  if (!("serialNumber" in data && hasOwn(data, "serialNumber"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/serialNumber" }]
    return false
  }
  if (!Number.isInteger(data.headerId)) {
    validate.errors = [{ keywordLocation: "#/properties/headerId/type", instanceLocation: "#/headerId" }]
    return false
  }
  if (!(typeof data.timestamp === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/timestamp/type", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!format0(data.timestamp)) {
    validate.errors = [{ keywordLocation: "#/properties/timestamp/format", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!(typeof data.version === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/version/type", instanceLocation: "#/version" }]
    return false
  }
  if (!(typeof data.manufacturer === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/manufacturer/type", instanceLocation: "#/manufacturer" }]
    return false
  }
  if (!(typeof data.serialNumber === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/serialNumber/type", instanceLocation: "#/serialNumber" }]
    return false
  }
  return true
};
const errorMerge = ({ keywordLocation, instanceLocation }, schemaBase, dataBase) => ({
  keywordLocation: `${schemaBase}${keywordLocation.slice(1)}`,
  instanceLocation: `${dataBase}${instanceLocation.slice(1)}`,
});
const ref0 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  const err0 = validate.errors
  const res0 = ref1(data)
  const suberr0 = ref1.errors
  validate.errors = err0
  if (!res0) {
    validate.errors = [errorMerge(suberr0[0], "#/allOf/0/$ref", "#")]
    return false
  }
  if (!("connectionState" in data && hasOwn(data, "connectionState"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/connectionState" }]
    return false
  }
  if (!(typeof data.connectionState === "string")) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/connectionState/type", instanceLocation: "#/connectionState" }]
    return false
  }
  if (!(data.connectionState === "ONLINE" || data.connectionState === "OFFLINE" || data.connectionState === "CONNECTIONBROKEN")) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/connectionState/enum", instanceLocation: "#/connectionState" }]
    return false
  }
  return true
};
return ref0})();

const validateHeader = (function() {
'use strict'
const hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);
const format0 = (input) => {
    if (input.length > 10 + 1 + 9 + 12 + 6) return false
    const full = /^\d\d\d\d-(?:0[1-9]|1[0-2])-(?:[0-2]\d|3[01])[t\s](?:2[0-3]|[0-1]\d):[0-5]\d:(?:[0-5]\d|60)(?:\.\d+)?(?:z|[+-](?:2[0-3]|[0-1]\d)(?::?[0-5]\d)?)$/i
    const feb = input[5] === '0' && input[6] === '2'
    if ((feb && input[8] === '3') || !full.test(input)) return false
    if (input[17] === '6') {
      const p = input.slice(11).match(/([0-9.]+|[^0-9.])/g)
      let hm = Number(p[0]) * 60 + Number(p[2])
      if (p[5] === '+') hm += 24 * 60 - Number(p[6] || 0) * 60 - Number(p[8] || 0)
      else if (p[5] === '-') hm += Number(p[6] || 0) * 60 + Number(p[8] || 0)
      if (hm % (24 * 60) !== 23 * 60 + 59) return false
    }
    if (feb) {
      if (/^\d\d\d\d-02-(?:[012][1-8]|[12]0|[01]9)/.test(input)) return true
      const matches = input.match(/^(\d\d\d\d)-02-29/)
      if (!matches) return false
      const year = matches[1] | 0
      return year % 16 === 0 || (year % 4 === 0 && year % 25 !== 0)
    }
    if (input[8] === '3' && input[9] === '1') return /^\d\d\d\d-(?:0[13578]|1[02])-31/.test(input)
    return /^\d\d\d\d-(?:0[13-9]|1[012])-(?:[012][1-9]|[123]0)/.test(input)
  };
const ref1 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("headerId" in data && hasOwn(data, "headerId"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/headerId" }]
    return false
  }
  if (!("timestamp" in data && hasOwn(data, "timestamp"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!("version" in data && hasOwn(data, "version"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/version" }]
    return false
  }
  if (!("manufacturer" in data && hasOwn(data, "manufacturer"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/manufacturer" }]
    return false
  }
  if (!("serialNumber" in data && hasOwn(data, "serialNumber"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/serialNumber" }]
    return false
  }
  if (!Number.isInteger(data.headerId)) {
    validate.errors = [{ keywordLocation: "#/properties/headerId/type", instanceLocation: "#/headerId" }]
    return false
  }
  if (!(typeof data.timestamp === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/timestamp/type", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!format0(data.timestamp)) {
    validate.errors = [{ keywordLocation: "#/properties/timestamp/format", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!(typeof data.version === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/version/type", instanceLocation: "#/version" }]
    return false
  }
  if (!(typeof data.manufacturer === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/manufacturer/type", instanceLocation: "#/manufacturer" }]
    return false
  }
  if (!(typeof data.serialNumber === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/serialNumber/type", instanceLocation: "#/serialNumber" }]
    return false
  }
  return true
};
const errorMerge = ({ keywordLocation, instanceLocation }, schemaBase, dataBase) => ({
  keywordLocation: `${schemaBase}${keywordLocation.slice(1)}`,
  instanceLocation: `${dataBase}${instanceLocation.slice(1)}`,
});
const ref0 = function validate(data) {
  validate.errors = null
  const err0 = validate.errors
  const res0 = ref1(data)
  const suberr0 = ref1.errors
  validate.errors = err0
  if (!res0) {
    validate.errors = [errorMerge(suberr0[0], "#/$ref", "#")]
    return false
  }
  return true
};
return ref0})();

const validateInstantActions = (function() {
'use strict'
const hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);
const format0 = (input) => {
    if (input.length > 10 + 1 + 9 + 12 + 6) return false
    const full = /^\d\d\d\d-(?:0[1-9]|1[0-2])-(?:[0-2]\d|3[01])[t\s](?:2[0-3]|[0-1]\d):[0-5]\d:(?:[0-5]\d|60)(?:\.\d+)?(?:z|[+-](?:2[0-3]|[0-1]\d)(?::?[0-5]\d)?)$/i
    const feb = input[5] === '0' && input[6] === '2'
    if ((feb && input[8] === '3') || !full.test(input)) return false
    if (input[17] === '6') {
      const p = input.slice(11).match(/([0-9.]+|[^0-9.])/g)
      let hm = Number(p[0]) * 60 + Number(p[2])
      if (p[5] === '+') hm += 24 * 60 - Number(p[6] || 0) * 60 - Number(p[8] || 0)
      else if (p[5] === '-') hm += Number(p[6] || 0) * 60 + Number(p[8] || 0)
      if (hm % (24 * 60) !== 23 * 60 + 59) return false
    }
    if (feb) {
      if (/^\d\d\d\d-02-(?:[012][1-8]|[12]0|[01]9)/.test(input)) return true
      const matches = input.match(/^(\d\d\d\d)-02-29/)
      if (!matches) return false
      const year = matches[1] | 0
      return year % 16 === 0 || (year % 4 === 0 && year % 25 !== 0)
    }
    if (input[8] === '3' && input[9] === '1') return /^\d\d\d\d-(?:0[13578]|1[02])-31/.test(input)
    return /^\d\d\d\d-(?:0[13-9]|1[012])-(?:[012][1-9]|[123]0)/.test(input)
  };
const ref1 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("headerId" in data && hasOwn(data, "headerId"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/headerId" }]
    return false
  }
  if (!("timestamp" in data && hasOwn(data, "timestamp"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!("version" in data && hasOwn(data, "version"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/version" }]
    return false
  }
  if (!("manufacturer" in data && hasOwn(data, "manufacturer"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/manufacturer" }]
    return false
  }
  if (!("serialNumber" in data && hasOwn(data, "serialNumber"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/serialNumber" }]
    return false
  }
  if (!Number.isInteger(data.headerId)) {
    validate.errors = [{ keywordLocation: "#/properties/headerId/type", instanceLocation: "#/headerId" }]
    return false
  }
  if (!(typeof data.timestamp === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/timestamp/type", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!format0(data.timestamp)) {
    validate.errors = [{ keywordLocation: "#/properties/timestamp/format", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!(typeof data.version === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/version/type", instanceLocation: "#/version" }]
    return false
  }
  if (!(typeof data.manufacturer === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/manufacturer/type", instanceLocation: "#/manufacturer" }]
    return false
  }
  if (!(typeof data.serialNumber === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/serialNumber/type", instanceLocation: "#/serialNumber" }]
    return false
  }
  return true
};
const errorMerge = ({ keywordLocation, instanceLocation }, schemaBase, dataBase) => ({
  keywordLocation: `${schemaBase}${keywordLocation.slice(1)}`,
  instanceLocation: `${dataBase}${instanceLocation.slice(1)}`,
});
const ref2 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("actionId" in data && hasOwn(data, "actionId"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/actionId" }]
    return false
  }
  if (!("actionType" in data && hasOwn(data, "actionType"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/actionType" }]
    return false
  }
  if (!("blockingType" in data && hasOwn(data, "blockingType"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/blockingType" }]
    return false
  }
  if (!(typeof data.actionType === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/actionType/type", instanceLocation: "#/actionType" }]
    return false
  }
  if (!(typeof data.actionId === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/actionId/type", instanceLocation: "#/actionId" }]
    return false
  }
  if ("actionDescription" in data && hasOwn(data, "actionDescription")) {
    if (!(typeof data.actionDescription === "string")) {
      validate.errors = [{ keywordLocation: "#/properties/actionDescription/type", instanceLocation: "#/actionDescription" }]
      return false
    }
  }
  if (!(typeof data.blockingType === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/blockingType/type", instanceLocation: "#/blockingType" }]
    return false
  }
  if (!(data.blockingType === "NONE" || data.blockingType === "SOFT" || data.blockingType === "HARD")) {
    validate.errors = [{ keywordLocation: "#/properties/blockingType/enum", instanceLocation: "#/blockingType" }]
    return false
  }
  if ("actionParameters" in data && hasOwn(data, "actionParameters")) {
    if (!Array.isArray(data.actionParameters)) {
      validate.errors = [{ keywordLocation: "#/properties/actionParameters/type", instanceLocation: "#/actionParameters" }]
      return false
    }
    for (let j = 0; j < data.actionParameters.length; j++) {
      if (j in data.actionParameters && hasOwn(data.actionParameters, j)) {
        if (!(typeof data.actionParameters[j] === "object" && data.actionParameters[j] && !Array.isArray(data.actionParameters[j]))) {
          validate.errors = [{ keywordLocation: "#/properties/actionParameters/items/type", instanceLocation: "#/actionParameters/"+j }]
          return false
        }
        if (!("key" in data.actionParameters[j] && hasOwn(data.actionParameters[j], "key"))) {
          validate.errors = [{ keywordLocation: "#/properties/actionParameters/items/required", instanceLocation: "#/actionParameters/"+j+"/key" }]
          return false
        }
        if (!("value" in data.actionParameters[j] && hasOwn(data.actionParameters[j], "value"))) {
          validate.errors = [{ keywordLocation: "#/properties/actionParameters/items/required", instanceLocation: "#/actionParameters/"+j+"/value" }]
          return false
        }
        if (!(typeof data.actionParameters[j].key === "string")) {
          validate.errors = [{ keywordLocation: "#/properties/actionParameters/items/properties/key/type", instanceLocation: "#/actionParameters/"+j+"/key" }]
          return false
        }
        if (!(Array.isArray(data.actionParameters[j].value) || typeof data.actionParameters[j].value === "boolean" || typeof data.actionParameters[j].value === "number" || typeof data.actionParameters[j].value === "string")) {
          validate.errors = [{ keywordLocation: "#/properties/actionParameters/items/properties/value/type", instanceLocation: "#/actionParameters/"+j+"/value" }]
          return false
        }
      }
    }
  }
  return true
};
const ref0 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  const err0 = validate.errors
  const res0 = ref1(data)
  const suberr0 = ref1.errors
  validate.errors = err0
  if (!res0) {
    validate.errors = [errorMerge(suberr0[0], "#/allOf/0/$ref", "#")]
    return false
  }
  if (!("instantActions" in data && hasOwn(data, "instantActions"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/instantActions" }]
    return false
  }
  if (!Array.isArray(data.instantActions)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/instantActions/type", instanceLocation: "#/instantActions" }]
    return false
  }
  for (let i = 0; i < data.instantActions.length; i++) {
    if (i in data.instantActions && hasOwn(data.instantActions, i)) {
      const err1 = validate.errors
      const res1 = ref2(data.instantActions[i])
      const suberr1 = ref2.errors
      validate.errors = err1
      if (!res1) {
        validate.errors = [errorMerge(suberr1[0], "#/allOf/1/properties/instantActions/items/$ref", "#/instantActions/"+i)]
        return false
      }
    }
  }
  return true
};
return ref0})();

const validateOrder = (function() {
'use strict'
const hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);
const format0 = (input) => {
    if (input.length > 10 + 1 + 9 + 12 + 6) return false
    const full = /^\d\d\d\d-(?:0[1-9]|1[0-2])-(?:[0-2]\d|3[01])[t\s](?:2[0-3]|[0-1]\d):[0-5]\d:(?:[0-5]\d|60)(?:\.\d+)?(?:z|[+-](?:2[0-3]|[0-1]\d)(?::?[0-5]\d)?)$/i
    const feb = input[5] === '0' && input[6] === '2'
    if ((feb && input[8] === '3') || !full.test(input)) return false
    if (input[17] === '6') {
      const p = input.slice(11).match(/([0-9.]+|[^0-9.])/g)
      let hm = Number(p[0]) * 60 + Number(p[2])
      if (p[5] === '+') hm += 24 * 60 - Number(p[6] || 0) * 60 - Number(p[8] || 0)
      else if (p[5] === '-') hm += Number(p[6] || 0) * 60 + Number(p[8] || 0)
      if (hm % (24 * 60) !== 23 * 60 + 59) return false
    }
    if (feb) {
      if (/^\d\d\d\d-02-(?:[012][1-8]|[12]0|[01]9)/.test(input)) return true
      const matches = input.match(/^(\d\d\d\d)-02-29/)
      if (!matches) return false
      const year = matches[1] | 0
      return year % 16 === 0 || (year % 4 === 0 && year % 25 !== 0)
    }
    if (input[8] === '3' && input[9] === '1') return /^\d\d\d\d-(?:0[13578]|1[02])-31/.test(input)
    return /^\d\d\d\d-(?:0[13-9]|1[012])-(?:[012][1-9]|[123]0)/.test(input)
  };
const ref1 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("headerId" in data && hasOwn(data, "headerId"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/headerId" }]
    return false
  }
  if (!("timestamp" in data && hasOwn(data, "timestamp"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!("version" in data && hasOwn(data, "version"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/version" }]
    return false
  }
  if (!("manufacturer" in data && hasOwn(data, "manufacturer"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/manufacturer" }]
    return false
  }
  if (!("serialNumber" in data && hasOwn(data, "serialNumber"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/serialNumber" }]
    return false
  }
  if (!Number.isInteger(data.headerId)) {
    validate.errors = [{ keywordLocation: "#/properties/headerId/type", instanceLocation: "#/headerId" }]
    return false
  }
  if (!(typeof data.timestamp === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/timestamp/type", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!format0(data.timestamp)) {
    validate.errors = [{ keywordLocation: "#/properties/timestamp/format", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!(typeof data.version === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/version/type", instanceLocation: "#/version" }]
    return false
  }
  if (!(typeof data.manufacturer === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/manufacturer/type", instanceLocation: "#/manufacturer" }]
    return false
  }
  if (!(typeof data.serialNumber === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/serialNumber/type", instanceLocation: "#/serialNumber" }]
    return false
  }
  return true
};
const errorMerge = ({ keywordLocation, instanceLocation }, schemaBase, dataBase) => ({
  keywordLocation: `${schemaBase}${keywordLocation.slice(1)}`,
  instanceLocation: `${dataBase}${instanceLocation.slice(1)}`,
});
const ref2 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("x" in data && hasOwn(data, "x"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/x" }]
    return false
  }
  if (!("y" in data && hasOwn(data, "y"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/y" }]
    return false
  }
  if (!("mapId" in data && hasOwn(data, "mapId"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/mapId" }]
    return false
  }
  if (!(typeof data.x === "number")) {
    validate.errors = [{ keywordLocation: "#/properties/x/type", instanceLocation: "#/x" }]
    return false
  }
  if (!(typeof data.y === "number")) {
    validate.errors = [{ keywordLocation: "#/properties/y/type", instanceLocation: "#/y" }]
    return false
  }
  if ("theta" in data && hasOwn(data, "theta")) {
    if (!(typeof data.theta === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/theta/type", instanceLocation: "#/theta" }]
      return false
    }
    if (!(-3.14159265359 <= data.theta)) {
      validate.errors = [{ keywordLocation: "#/properties/theta/minimum", instanceLocation: "#/theta" }]
      return false
    }
    if (!(3.14159265359 >= data.theta)) {
      validate.errors = [{ keywordLocation: "#/properties/theta/maximum", instanceLocation: "#/theta" }]
      return false
    }
  }
  if ("allowedDeviationXy" in data && hasOwn(data, "allowedDeviationXy")) {
    if (!(typeof data.allowedDeviationXy === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/allowedDeviationXy/type", instanceLocation: "#/allowedDeviationXy" }]
      return false
    }
    if (!(0 <= data.allowedDeviationXy)) {
      validate.errors = [{ keywordLocation: "#/properties/allowedDeviationXy/minimum", instanceLocation: "#/allowedDeviationXy" }]
      return false
    }
  }
  if ("allowedDeviationTheta" in data && hasOwn(data, "allowedDeviationTheta")) {
    if (!(typeof data.allowedDeviationTheta === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/allowedDeviationTheta/type", instanceLocation: "#/allowedDeviationTheta" }]
      return false
    }
    if (!(0 <= data.allowedDeviationTheta)) {
      validate.errors = [{ keywordLocation: "#/properties/allowedDeviationTheta/minimum", instanceLocation: "#/allowedDeviationTheta" }]
      return false
    }
    if (!(3.141592654 >= data.allowedDeviationTheta)) {
      validate.errors = [{ keywordLocation: "#/properties/allowedDeviationTheta/maximum", instanceLocation: "#/allowedDeviationTheta" }]
      return false
    }
  }
  if (!(typeof data.mapId === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/mapId/type", instanceLocation: "#/mapId" }]
    return false
  }
  if ("mapDescription" in data && hasOwn(data, "mapDescription")) {
    if (!(typeof data.mapDescription === "string")) {
      validate.errors = [{ keywordLocation: "#/properties/mapDescription/type", instanceLocation: "#/mapDescription" }]
      return false
    }
  }
  return true
};
const ref3 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("actionId" in data && hasOwn(data, "actionId"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/actionId" }]
    return false
  }
  if (!("actionType" in data && hasOwn(data, "actionType"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/actionType" }]
    return false
  }
  if (!("blockingType" in data && hasOwn(data, "blockingType"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/blockingType" }]
    return false
  }
  if (!(typeof data.actionType === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/actionType/type", instanceLocation: "#/actionType" }]
    return false
  }
  if (!(typeof data.actionId === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/actionId/type", instanceLocation: "#/actionId" }]
    return false
  }
  if ("actionDescription" in data && hasOwn(data, "actionDescription")) {
    if (!(typeof data.actionDescription === "string")) {
      validate.errors = [{ keywordLocation: "#/properties/actionDescription/type", instanceLocation: "#/actionDescription" }]
      return false
    }
  }
  if (!(typeof data.blockingType === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/blockingType/type", instanceLocation: "#/blockingType" }]
    return false
  }
  if (!(data.blockingType === "NONE" || data.blockingType === "SOFT" || data.blockingType === "HARD")) {
    validate.errors = [{ keywordLocation: "#/properties/blockingType/enum", instanceLocation: "#/blockingType" }]
    return false
  }
  if ("actionParameters" in data && hasOwn(data, "actionParameters")) {
    if (!Array.isArray(data.actionParameters)) {
      validate.errors = [{ keywordLocation: "#/properties/actionParameters/type", instanceLocation: "#/actionParameters" }]
      return false
    }
    for (let k = 0; k < data.actionParameters.length; k++) {
      if (k in data.actionParameters && hasOwn(data.actionParameters, k)) {
        if (!(typeof data.actionParameters[k] === "object" && data.actionParameters[k] && !Array.isArray(data.actionParameters[k]))) {
          validate.errors = [{ keywordLocation: "#/properties/actionParameters/items/type", instanceLocation: "#/actionParameters/"+k }]
          return false
        }
        if (!("key" in data.actionParameters[k] && hasOwn(data.actionParameters[k], "key"))) {
          validate.errors = [{ keywordLocation: "#/properties/actionParameters/items/required", instanceLocation: "#/actionParameters/"+k+"/key" }]
          return false
        }
        if (!("value" in data.actionParameters[k] && hasOwn(data.actionParameters[k], "value"))) {
          validate.errors = [{ keywordLocation: "#/properties/actionParameters/items/required", instanceLocation: "#/actionParameters/"+k+"/value" }]
          return false
        }
        if (!(typeof data.actionParameters[k].key === "string")) {
          validate.errors = [{ keywordLocation: "#/properties/actionParameters/items/properties/key/type", instanceLocation: "#/actionParameters/"+k+"/key" }]
          return false
        }
        if (!(Array.isArray(data.actionParameters[k].value) || typeof data.actionParameters[k].value === "boolean" || typeof data.actionParameters[k].value === "number" || typeof data.actionParameters[k].value === "string")) {
          validate.errors = [{ keywordLocation: "#/properties/actionParameters/items/properties/value/type", instanceLocation: "#/actionParameters/"+k+"/value" }]
          return false
        }
      }
    }
  }
  return true
};
const ref4 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("degree" in data && hasOwn(data, "degree"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/degree" }]
    return false
  }
  if (!("knotVector" in data && hasOwn(data, "knotVector"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/knotVector" }]
    return false
  }
  if (!("controlPoints" in data && hasOwn(data, "controlPoints"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/controlPoints" }]
    return false
  }
  if (!Number.isInteger(data.degree)) {
    validate.errors = [{ keywordLocation: "#/properties/degree/type", instanceLocation: "#/degree" }]
    return false
  }
  if (!Array.isArray(data.knotVector)) {
    validate.errors = [{ keywordLocation: "#/properties/knotVector/type", instanceLocation: "#/knotVector" }]
    return false
  }
  for (let m = 0; m < data.knotVector.length; m++) {
    if (m in data.knotVector && hasOwn(data.knotVector, m)) {
      if (!(typeof data.knotVector[m] === "number")) {
        validate.errors = [{ keywordLocation: "#/properties/knotVector/items/type", instanceLocation: "#/knotVector/"+m }]
        return false
      }
      if (!(0 <= data.knotVector[m])) {
        validate.errors = [{ keywordLocation: "#/properties/knotVector/items/minimum", instanceLocation: "#/knotVector/"+m }]
        return false
      }
      if (!(1 >= data.knotVector[m])) {
        validate.errors = [{ keywordLocation: "#/properties/knotVector/items/maximum", instanceLocation: "#/knotVector/"+m }]
        return false
      }
    }
  }
  if (!Array.isArray(data.controlPoints)) {
    validate.errors = [{ keywordLocation: "#/properties/controlPoints/type", instanceLocation: "#/controlPoints" }]
    return false
  }
  for (let n = 0; n < data.controlPoints.length; n++) {
    if (n in data.controlPoints && hasOwn(data.controlPoints, n)) {
      if (!(typeof data.controlPoints[n] === "object" && data.controlPoints[n] && !Array.isArray(data.controlPoints[n]))) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/type", instanceLocation: "#/controlPoints/"+n }]
        return false
      }
      if (!("x" in data.controlPoints[n] && hasOwn(data.controlPoints[n], "x"))) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/required", instanceLocation: "#/controlPoints/"+n+"/x" }]
        return false
      }
      if (!("y" in data.controlPoints[n] && hasOwn(data.controlPoints[n], "y"))) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/required", instanceLocation: "#/controlPoints/"+n+"/y" }]
        return false
      }
      if (!("weight" in data.controlPoints[n] && hasOwn(data.controlPoints[n], "weight"))) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/required", instanceLocation: "#/controlPoints/"+n+"/weight" }]
        return false
      }
      if (!(typeof data.controlPoints[n].x === "number")) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/properties/x/type", instanceLocation: "#/controlPoints/"+n+"/x" }]
        return false
      }
      if (!(typeof data.controlPoints[n].y === "number")) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/properties/y/type", instanceLocation: "#/controlPoints/"+n+"/y" }]
        return false
      }
      if (!(typeof data.controlPoints[n].weight === "number")) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/properties/weight/type", instanceLocation: "#/controlPoints/"+n+"/weight" }]
        return false
      }
      if ("orientation" in data.controlPoints[n] && hasOwn(data.controlPoints[n], "orientation")) {
        if (!(typeof data.controlPoints[n].orientation === "number")) {
          validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/properties/orientation/type", instanceLocation: "#/controlPoints/"+n+"/orientation" }]
          return false
        }
        if (!(-3.14159265359 <= data.controlPoints[n].orientation)) {
          validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/properties/orientation/minimum", instanceLocation: "#/controlPoints/"+n+"/orientation" }]
          return false
        }
        if (!(3.14159265359 >= data.controlPoints[n].orientation)) {
          validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/properties/orientation/maximum", instanceLocation: "#/controlPoints/"+n+"/orientation" }]
          return false
        }
      }
    }
  }
  return true
};
const ref0 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  const err0 = validate.errors
  const res0 = ref1(data)
  const suberr0 = ref1.errors
  validate.errors = err0
  if (!res0) {
    validate.errors = [errorMerge(suberr0[0], "#/allOf/0/$ref", "#")]
    return false
  }
  if (!("orderId" in data && hasOwn(data, "orderId"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/orderId" }]
    return false
  }
  if (!("orderUpdateId" in data && hasOwn(data, "orderUpdateId"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/orderUpdateId" }]
    return false
  }
  if (!("nodes" in data && hasOwn(data, "nodes"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/nodes" }]
    return false
  }
  if (!("edges" in data && hasOwn(data, "edges"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/edges" }]
    return false
  }
  if (!(typeof data.orderId === "string")) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/orderId/type", instanceLocation: "#/orderId" }]
    return false
  }
  if (!Number.isInteger(data.orderUpdateId)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/orderUpdateId/type", instanceLocation: "#/orderUpdateId" }]
    return false
  }
  if (!(0 <= data.orderUpdateId)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/orderUpdateId/minimum", instanceLocation: "#/orderUpdateId" }]
    return false
  }
  if (!(4294967296 >= data.orderUpdateId)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/orderUpdateId/maximum", instanceLocation: "#/orderUpdateId" }]
    return false
  }
  if ("zoneSetId" in data && hasOwn(data, "zoneSetId")) {
    if (!(typeof data.zoneSetId === "string")) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/zoneSetId/type", instanceLocation: "#/zoneSetId" }]
      return false
    }
  }
  if (!Array.isArray(data.nodes)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/type", instanceLocation: "#/nodes" }]
    return false
  }
  if (data.nodes.length < 1) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/minItems", instanceLocation: "#/nodes" }]
    return false
  }
  for (let i = 0; i < data.nodes.length; i++) {
    if (i in data.nodes && hasOwn(data.nodes, i)) {
      if (!(typeof data.nodes[i] === "object" && data.nodes[i] && !Array.isArray(data.nodes[i]))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/items/type", instanceLocation: "#/nodes/"+i }]
        return false
      }
      if (!("nodeId" in data.nodes[i] && hasOwn(data.nodes[i], "nodeId"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/items/required", instanceLocation: "#/nodes/"+i+"/nodeId" }]
        return false
      }
      if (!("sequenceId" in data.nodes[i] && hasOwn(data.nodes[i], "sequenceId"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/items/required", instanceLocation: "#/nodes/"+i+"/sequenceId" }]
        return false
      }
      if (!("released" in data.nodes[i] && hasOwn(data.nodes[i], "released"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/items/required", instanceLocation: "#/nodes/"+i+"/released" }]
        return false
      }
      if (!("actions" in data.nodes[i] && hasOwn(data.nodes[i], "actions"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/items/required", instanceLocation: "#/nodes/"+i+"/actions" }]
        return false
      }
      if (!(typeof data.nodes[i].nodeId === "string")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/items/properties/nodeId/type", instanceLocation: "#/nodes/"+i+"/nodeId" }]
        return false
      }
      if (!(Number.isInteger(data.nodes[i].sequenceId))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/items/properties/sequenceId/type", instanceLocation: "#/nodes/"+i+"/sequenceId" }]
        return false
      }
      if (!(0 <= data.nodes[i].sequenceId)) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/items/properties/sequenceId/minimum", instanceLocation: "#/nodes/"+i+"/sequenceId" }]
        return false
      }
      if (!(4294967296 >= data.nodes[i].sequenceId)) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/items/properties/sequenceId/maximum", instanceLocation: "#/nodes/"+i+"/sequenceId" }]
        return false
      }
      if ("nodeDescription" in data.nodes[i] && hasOwn(data.nodes[i], "nodeDescription")) {
        if (!(typeof data.nodes[i].nodeDescription === "string")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/items/properties/nodeDescription/type", instanceLocation: "#/nodes/"+i+"/nodeDescription" }]
          return false
        }
      }
      if (!(typeof data.nodes[i].released === "boolean")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/items/properties/released/type", instanceLocation: "#/nodes/"+i+"/released" }]
        return false
      }
      if ("nodePosition" in data.nodes[i] && hasOwn(data.nodes[i], "nodePosition")) {
        const err1 = validate.errors
        const res1 = ref2(data.nodes[i].nodePosition)
        const suberr1 = ref2.errors
        validate.errors = err1
        if (!res1) {
          validate.errors = [errorMerge(suberr1[0], "#/allOf/1/properties/nodes/items/properties/nodePosition/$ref", "#/nodes/"+i+"/nodePosition")]
          return false
        }
      }
      if (!(Array.isArray(data.nodes[i].actions))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodes/items/properties/actions/type", instanceLocation: "#/nodes/"+i+"/actions" }]
        return false
      }
      for (let j = 0; j < data.nodes[i].actions.length; j++) {
        if (j in data.nodes[i].actions && hasOwn(data.nodes[i].actions, j)) {
          const err2 = validate.errors
          const res2 = ref3(data.nodes[i].actions[j])
          const suberr2 = ref3.errors
          validate.errors = err2
          if (!res2) {
            validate.errors = [errorMerge(suberr2[0], "#/allOf/1/properties/nodes/items/properties/actions/items/$ref", "#/nodes/"+i+"actions/"+j)]
            return false
          }
        }
      }
    }
  }
  if (!Array.isArray(data.edges)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/type", instanceLocation: "#/edges" }]
    return false
  }
  for (let l = 0; l < data.edges.length; l++) {
    if (l in data.edges && hasOwn(data.edges, l)) {
      if (!(typeof data.edges[l] === "object" && data.edges[l] && !Array.isArray(data.edges[l]))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/type", instanceLocation: "#/edges/"+l }]
        return false
      }
      if (!("edgeId" in data.edges[l] && hasOwn(data.edges[l], "edgeId"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/required", instanceLocation: "#/edges/"+l+"/edgeId" }]
        return false
      }
      if (!("sequenceId" in data.edges[l] && hasOwn(data.edges[l], "sequenceId"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/required", instanceLocation: "#/edges/"+l+"/sequenceId" }]
        return false
      }
      if (!("released" in data.edges[l] && hasOwn(data.edges[l], "released"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/required", instanceLocation: "#/edges/"+l+"/released" }]
        return false
      }
      if (!("startNodeId" in data.edges[l] && hasOwn(data.edges[l], "startNodeId"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/required", instanceLocation: "#/edges/"+l+"/startNodeId" }]
        return false
      }
      if (!("endNodeId" in data.edges[l] && hasOwn(data.edges[l], "endNodeId"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/required", instanceLocation: "#/edges/"+l+"/endNodeId" }]
        return false
      }
      if (!("actions" in data.edges[l] && hasOwn(data.edges[l], "actions"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/required", instanceLocation: "#/edges/"+l+"/actions" }]
        return false
      }
      if (!(typeof data.edges[l].edgeId === "string")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/edgeId/type", instanceLocation: "#/edges/"+l+"/edgeId" }]
        return false
      }
      if (!(Number.isInteger(data.edges[l].sequenceId))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/sequenceId/type", instanceLocation: "#/edges/"+l+"/sequenceId" }]
        return false
      }
      if (!(0 <= data.edges[l].sequenceId)) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/sequenceId/minimum", instanceLocation: "#/edges/"+l+"/sequenceId" }]
        return false
      }
      if (!(4294967296 >= data.edges[l].sequenceId)) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/sequenceId/maximum", instanceLocation: "#/edges/"+l+"/sequenceId" }]
        return false
      }
      if ("edgeDescription" in data.edges[l] && hasOwn(data.edges[l], "edgeDescription")) {
        if (!(typeof data.edges[l].edgeDescription === "string")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/edgeDescription/type", instanceLocation: "#/edges/"+l+"/edgeDescription" }]
          return false
        }
      }
      if (!(typeof data.edges[l].released === "boolean")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/released/type", instanceLocation: "#/edges/"+l+"/released" }]
        return false
      }
      if (!(typeof data.edges[l].startNodeId === "string")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/startNodeId/type", instanceLocation: "#/edges/"+l+"/startNodeId" }]
        return false
      }
      if (!(typeof data.edges[l].endNodeId === "string")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/endNodeId/type", instanceLocation: "#/edges/"+l+"/endNodeId" }]
        return false
      }
      if ("maxSpeed" in data.edges[l] && hasOwn(data.edges[l], "maxSpeed")) {
        if (!(typeof data.edges[l].maxSpeed === "number")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/maxSpeed/type", instanceLocation: "#/edges/"+l+"/maxSpeed" }]
          return false
        }
      }
      if ("maxHeight" in data.edges[l] && hasOwn(data.edges[l], "maxHeight")) {
        if (!(typeof data.edges[l].maxHeight === "number")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/maxHeight/type", instanceLocation: "#/edges/"+l+"/maxHeight" }]
          return false
        }
      }
      if ("minHeight" in data.edges[l] && hasOwn(data.edges[l], "minHeight")) {
        if (!(typeof data.edges[l].minHeight === "number")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/minHeight/type", instanceLocation: "#/edges/"+l+"/minHeight" }]
          return false
        }
      }
      if ("orientation" in data.edges[l] && hasOwn(data.edges[l], "orientation")) {
        if (!(typeof data.edges[l].orientation === "number")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/orientation/type", instanceLocation: "#/edges/"+l+"/orientation" }]
          return false
        }
        if (!(-3.14159265359 <= data.edges[l].orientation)) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/orientation/minimum", instanceLocation: "#/edges/"+l+"/orientation" }]
          return false
        }
        if (!(3.14159265359 >= data.edges[l].orientation)) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/orientation/maximum", instanceLocation: "#/edges/"+l+"/orientation" }]
          return false
        }
      }
      if ("direction" in data.edges[l] && hasOwn(data.edges[l], "direction")) {
        if (!(typeof data.edges[l].direction === "string")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/direction/type", instanceLocation: "#/edges/"+l+"/direction" }]
          return false
        }
      }
      if ("rotationAllowed" in data.edges[l] && hasOwn(data.edges[l], "rotationAllowed")) {
        if (!(typeof data.edges[l].rotationAllowed === "boolean")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/rotationAllowed/type", instanceLocation: "#/edges/"+l+"/rotationAllowed" }]
          return false
        }
      }
      if ("maxRotationSpeed" in data.edges[l] && hasOwn(data.edges[l], "maxRotationSpeed")) {
        if (!(typeof data.edges[l].maxRotationSpeed === "number")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/maxRotationSpeed/type", instanceLocation: "#/edges/"+l+"/maxRotationSpeed" }]
          return false
        }
      }
      if ("distance" in data.edges[l] && hasOwn(data.edges[l], "distance")) {
        if (!(typeof data.edges[l].distance === "number")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/distance/type", instanceLocation: "#/edges/"+l+"/distance" }]
          return false
        }
      }
      if ("trajectory" in data.edges[l] && hasOwn(data.edges[l], "trajectory")) {
        const err3 = validate.errors
        const res3 = ref4(data.edges[l].trajectory)
        const suberr3 = ref4.errors
        validate.errors = err3
        if (!res3) {
          validate.errors = [errorMerge(suberr3[0], "#/allOf/1/properties/edges/items/properties/trajectory/$ref", "#/edges/"+l+"/trajectory")]
          return false
        }
      }
      if (!(Array.isArray(data.edges[l].actions))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edges/items/properties/actions/type", instanceLocation: "#/edges/"+l+"/actions" }]
        return false
      }
      for (let o = 0; o < data.edges[l].actions.length; o++) {
        if (o in data.edges[l].actions && hasOwn(data.edges[l].actions, o)) {
          const err4 = validate.errors
          const res4 = ref3(data.edges[l].actions[o])
          const suberr4 = ref3.errors
          validate.errors = err4
          if (!res4) {
            validate.errors = [errorMerge(suberr4[0], "#/allOf/1/properties/edges/items/properties/actions/items/$ref", "#/edges/"+l+"actions/"+o)]
            return false
          }
        }
      }
    }
  }
  return true
};
return ref0})();

const validateState = (function() {
'use strict'
const hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);
const format0 = (input) => {
    if (input.length > 10 + 1 + 9 + 12 + 6) return false
    const full = /^\d\d\d\d-(?:0[1-9]|1[0-2])-(?:[0-2]\d|3[01])[t\s](?:2[0-3]|[0-1]\d):[0-5]\d:(?:[0-5]\d|60)(?:\.\d+)?(?:z|[+-](?:2[0-3]|[0-1]\d)(?::?[0-5]\d)?)$/i
    const feb = input[5] === '0' && input[6] === '2'
    if ((feb && input[8] === '3') || !full.test(input)) return false
    if (input[17] === '6') {
      const p = input.slice(11).match(/([0-9.]+|[^0-9.])/g)
      let hm = Number(p[0]) * 60 + Number(p[2])
      if (p[5] === '+') hm += 24 * 60 - Number(p[6] || 0) * 60 - Number(p[8] || 0)
      else if (p[5] === '-') hm += Number(p[6] || 0) * 60 + Number(p[8] || 0)
      if (hm % (24 * 60) !== 23 * 60 + 59) return false
    }
    if (feb) {
      if (/^\d\d\d\d-02-(?:[012][1-8]|[12]0|[01]9)/.test(input)) return true
      const matches = input.match(/^(\d\d\d\d)-02-29/)
      if (!matches) return false
      const year = matches[1] | 0
      return year % 16 === 0 || (year % 4 === 0 && year % 25 !== 0)
    }
    if (input[8] === '3' && input[9] === '1') return /^\d\d\d\d-(?:0[13578]|1[02])-31/.test(input)
    return /^\d\d\d\d-(?:0[13-9]|1[012])-(?:[012][1-9]|[123]0)/.test(input)
  };
const ref1 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("headerId" in data && hasOwn(data, "headerId"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/headerId" }]
    return false
  }
  if (!("timestamp" in data && hasOwn(data, "timestamp"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!("version" in data && hasOwn(data, "version"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/version" }]
    return false
  }
  if (!("manufacturer" in data && hasOwn(data, "manufacturer"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/manufacturer" }]
    return false
  }
  if (!("serialNumber" in data && hasOwn(data, "serialNumber"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/serialNumber" }]
    return false
  }
  if (!Number.isInteger(data.headerId)) {
    validate.errors = [{ keywordLocation: "#/properties/headerId/type", instanceLocation: "#/headerId" }]
    return false
  }
  if (!(typeof data.timestamp === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/timestamp/type", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!format0(data.timestamp)) {
    validate.errors = [{ keywordLocation: "#/properties/timestamp/format", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!(typeof data.version === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/version/type", instanceLocation: "#/version" }]
    return false
  }
  if (!(typeof data.manufacturer === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/manufacturer/type", instanceLocation: "#/manufacturer" }]
    return false
  }
  if (!(typeof data.serialNumber === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/serialNumber/type", instanceLocation: "#/serialNumber" }]
    return false
  }
  return true
};
const errorMerge = ({ keywordLocation, instanceLocation }, schemaBase, dataBase) => ({
  keywordLocation: `${schemaBase}${keywordLocation.slice(1)}`,
  instanceLocation: `${dataBase}${instanceLocation.slice(1)}`,
});
const ref2 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("x" in data && hasOwn(data, "x"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/x" }]
    return false
  }
  if (!("y" in data && hasOwn(data, "y"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/y" }]
    return false
  }
  if (!("mapId" in data && hasOwn(data, "mapId"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/mapId" }]
    return false
  }
  if (!(typeof data.x === "number")) {
    validate.errors = [{ keywordLocation: "#/properties/x/type", instanceLocation: "#/x" }]
    return false
  }
  if (!(typeof data.y === "number")) {
    validate.errors = [{ keywordLocation: "#/properties/y/type", instanceLocation: "#/y" }]
    return false
  }
  if ("theta" in data && hasOwn(data, "theta")) {
    if (!(typeof data.theta === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/theta/type", instanceLocation: "#/theta" }]
      return false
    }
    if (!(-3.14159265359 <= data.theta)) {
      validate.errors = [{ keywordLocation: "#/properties/theta/minimum", instanceLocation: "#/theta" }]
      return false
    }
    if (!(3.14159265359 >= data.theta)) {
      validate.errors = [{ keywordLocation: "#/properties/theta/maximum", instanceLocation: "#/theta" }]
      return false
    }
  }
  if ("allowedDeviationXy" in data && hasOwn(data, "allowedDeviationXy")) {
    if (!(typeof data.allowedDeviationXy === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/allowedDeviationXy/type", instanceLocation: "#/allowedDeviationXy" }]
      return false
    }
    if (!(0 <= data.allowedDeviationXy)) {
      validate.errors = [{ keywordLocation: "#/properties/allowedDeviationXy/minimum", instanceLocation: "#/allowedDeviationXy" }]
      return false
    }
  }
  if ("allowedDeviationTheta" in data && hasOwn(data, "allowedDeviationTheta")) {
    if (!(typeof data.allowedDeviationTheta === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/allowedDeviationTheta/type", instanceLocation: "#/allowedDeviationTheta" }]
      return false
    }
    if (!(0 <= data.allowedDeviationTheta)) {
      validate.errors = [{ keywordLocation: "#/properties/allowedDeviationTheta/minimum", instanceLocation: "#/allowedDeviationTheta" }]
      return false
    }
    if (!(3.141592654 >= data.allowedDeviationTheta)) {
      validate.errors = [{ keywordLocation: "#/properties/allowedDeviationTheta/maximum", instanceLocation: "#/allowedDeviationTheta" }]
      return false
    }
  }
  if (!(typeof data.mapId === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/mapId/type", instanceLocation: "#/mapId" }]
    return false
  }
  if ("mapDescription" in data && hasOwn(data, "mapDescription")) {
    if (!(typeof data.mapDescription === "string")) {
      validate.errors = [{ keywordLocation: "#/properties/mapDescription/type", instanceLocation: "#/mapDescription" }]
      return false
    }
  }
  return true
};
const ref3 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("degree" in data && hasOwn(data, "degree"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/degree" }]
    return false
  }
  if (!("knotVector" in data && hasOwn(data, "knotVector"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/knotVector" }]
    return false
  }
  if (!("controlPoints" in data && hasOwn(data, "controlPoints"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/controlPoints" }]
    return false
  }
  if (!Number.isInteger(data.degree)) {
    validate.errors = [{ keywordLocation: "#/properties/degree/type", instanceLocation: "#/degree" }]
    return false
  }
  if (!Array.isArray(data.knotVector)) {
    validate.errors = [{ keywordLocation: "#/properties/knotVector/type", instanceLocation: "#/knotVector" }]
    return false
  }
  for (let k = 0; k < data.knotVector.length; k++) {
    if (k in data.knotVector && hasOwn(data.knotVector, k)) {
      if (!(typeof data.knotVector[k] === "number")) {
        validate.errors = [{ keywordLocation: "#/properties/knotVector/items/type", instanceLocation: "#/knotVector/"+k }]
        return false
      }
      if (!(0 <= data.knotVector[k])) {
        validate.errors = [{ keywordLocation: "#/properties/knotVector/items/minimum", instanceLocation: "#/knotVector/"+k }]
        return false
      }
      if (!(1 >= data.knotVector[k])) {
        validate.errors = [{ keywordLocation: "#/properties/knotVector/items/maximum", instanceLocation: "#/knotVector/"+k }]
        return false
      }
    }
  }
  if (!Array.isArray(data.controlPoints)) {
    validate.errors = [{ keywordLocation: "#/properties/controlPoints/type", instanceLocation: "#/controlPoints" }]
    return false
  }
  for (let l = 0; l < data.controlPoints.length; l++) {
    if (l in data.controlPoints && hasOwn(data.controlPoints, l)) {
      if (!(typeof data.controlPoints[l] === "object" && data.controlPoints[l] && !Array.isArray(data.controlPoints[l]))) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/type", instanceLocation: "#/controlPoints/"+l }]
        return false
      }
      if (!("x" in data.controlPoints[l] && hasOwn(data.controlPoints[l], "x"))) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/required", instanceLocation: "#/controlPoints/"+l+"/x" }]
        return false
      }
      if (!("y" in data.controlPoints[l] && hasOwn(data.controlPoints[l], "y"))) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/required", instanceLocation: "#/controlPoints/"+l+"/y" }]
        return false
      }
      if (!("weight" in data.controlPoints[l] && hasOwn(data.controlPoints[l], "weight"))) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/required", instanceLocation: "#/controlPoints/"+l+"/weight" }]
        return false
      }
      if (!(typeof data.controlPoints[l].x === "number")) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/properties/x/type", instanceLocation: "#/controlPoints/"+l+"/x" }]
        return false
      }
      if (!(typeof data.controlPoints[l].y === "number")) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/properties/y/type", instanceLocation: "#/controlPoints/"+l+"/y" }]
        return false
      }
      if (!(typeof data.controlPoints[l].weight === "number")) {
        validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/properties/weight/type", instanceLocation: "#/controlPoints/"+l+"/weight" }]
        return false
      }
      if ("orientation" in data.controlPoints[l] && hasOwn(data.controlPoints[l], "orientation")) {
        if (!(typeof data.controlPoints[l].orientation === "number")) {
          validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/properties/orientation/type", instanceLocation: "#/controlPoints/"+l+"/orientation" }]
          return false
        }
        if (!(-3.14159265359 <= data.controlPoints[l].orientation)) {
          validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/properties/orientation/minimum", instanceLocation: "#/controlPoints/"+l+"/orientation" }]
          return false
        }
        if (!(3.14159265359 >= data.controlPoints[l].orientation)) {
          validate.errors = [{ keywordLocation: "#/properties/controlPoints/items/properties/orientation/maximum", instanceLocation: "#/controlPoints/"+l+"/orientation" }]
          return false
        }
      }
    }
  }
  return true
};
const ref4 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("x" in data && hasOwn(data, "x"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/x" }]
    return false
  }
  if (!("y" in data && hasOwn(data, "y"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/y" }]
    return false
  }
  if (!("theta" in data && hasOwn(data, "theta"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/theta" }]
    return false
  }
  if (!("mapId" in data && hasOwn(data, "mapId"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/mapId" }]
    return false
  }
  if (!("positionInitialized" in data && hasOwn(data, "positionInitialized"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/positionInitialized" }]
    return false
  }
  if (!(typeof data.x === "number")) {
    validate.errors = [{ keywordLocation: "#/properties/x/type", instanceLocation: "#/x" }]
    return false
  }
  if (!(typeof data.y === "number")) {
    validate.errors = [{ keywordLocation: "#/properties/y/type", instanceLocation: "#/y" }]
    return false
  }
  if (!(typeof data.theta === "number")) {
    validate.errors = [{ keywordLocation: "#/properties/theta/type", instanceLocation: "#/theta" }]
    return false
  }
  if (!(typeof data.mapId === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/mapId/type", instanceLocation: "#/mapId" }]
    return false
  }
  if ("mapDescription" in data && hasOwn(data, "mapDescription")) {
    if (!(typeof data.mapDescription === "string")) {
      validate.errors = [{ keywordLocation: "#/properties/mapDescription/type", instanceLocation: "#/mapDescription" }]
      return false
    }
  }
  if (!(typeof data.positionInitialized === "boolean")) {
    validate.errors = [{ keywordLocation: "#/properties/positionInitialized/type", instanceLocation: "#/positionInitialized" }]
    return false
  }
  if ("localizationScore" in data && hasOwn(data, "localizationScore")) {
    if (!(typeof data.localizationScore === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/localizationScore/type", instanceLocation: "#/localizationScore" }]
      return false
    }
    if (!(0 <= data.localizationScore)) {
      validate.errors = [{ keywordLocation: "#/properties/localizationScore/minimum", instanceLocation: "#/localizationScore" }]
      return false
    }
    if (!(1 >= data.localizationScore)) {
      validate.errors = [{ keywordLocation: "#/properties/localizationScore/maximum", instanceLocation: "#/localizationScore" }]
      return false
    }
  }
  if ("deviationRange" in data && hasOwn(data, "deviationRange")) {
    if (!(typeof data.deviationRange === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/deviationRange/type", instanceLocation: "#/deviationRange" }]
      return false
    }
  }
  return true
};
const ref5 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if ("vx" in data && hasOwn(data, "vx")) {
    if (!(typeof data.vx === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/vx/type", instanceLocation: "#/vx" }]
      return false
    }
  }
  if ("vy" in data && hasOwn(data, "vy")) {
    if (!(typeof data.vy === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/vy/type", instanceLocation: "#/vy" }]
      return false
    }
  }
  if ("omega" in data && hasOwn(data, "omega")) {
    if (!(typeof data.omega === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/omega/type", instanceLocation: "#/omega" }]
      return false
    }
  }
  return true
};
const ref0 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  const err0 = validate.errors
  const res0 = ref1(data)
  const suberr0 = ref1.errors
  validate.errors = err0
  if (!res0) {
    validate.errors = [errorMerge(suberr0[0], "#/allOf/0/$ref", "#")]
    return false
  }
  if (!("orderId" in data && hasOwn(data, "orderId"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/orderId" }]
    return false
  }
  if (!("orderUpdateId" in data && hasOwn(data, "orderUpdateId"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/orderUpdateId" }]
    return false
  }
  if (!("lastNodeId" in data && hasOwn(data, "lastNodeId"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/lastNodeId" }]
    return false
  }
  if (!("lastNodeSequenceId" in data && hasOwn(data, "lastNodeSequenceId"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/lastNodeSequenceId" }]
    return false
  }
  if (!("nodeStates" in data && hasOwn(data, "nodeStates"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/nodeStates" }]
    return false
  }
  if (!("edgeStates" in data && hasOwn(data, "edgeStates"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/edgeStates" }]
    return false
  }
  if (!("driving" in data && hasOwn(data, "driving"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/driving" }]
    return false
  }
  if (!("actionStates" in data && hasOwn(data, "actionStates"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/actionStates" }]
    return false
  }
  if (!("batteryState" in data && hasOwn(data, "batteryState"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/batteryState" }]
    return false
  }
  if (!("operatingMode" in data && hasOwn(data, "operatingMode"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/operatingMode" }]
    return false
  }
  if (!("errors" in data && hasOwn(data, "errors"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/errors" }]
    return false
  }
  if (!("safetyState" in data && hasOwn(data, "safetyState"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/required", instanceLocation: "#/safetyState" }]
    return false
  }
  if (!(typeof data.orderId === "string")) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/orderId/type", instanceLocation: "#/orderId" }]
    return false
  }
  if (!Number.isInteger(data.orderUpdateId)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/orderUpdateId/type", instanceLocation: "#/orderUpdateId" }]
    return false
  }
  if (!(0 <= data.orderUpdateId)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/orderUpdateId/minimum", instanceLocation: "#/orderUpdateId" }]
    return false
  }
  if (!(4294967296 >= data.orderUpdateId)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/orderUpdateId/maximum", instanceLocation: "#/orderUpdateId" }]
    return false
  }
  if ("zoneSetId" in data && hasOwn(data, "zoneSetId")) {
    if (!(typeof data.zoneSetId === "string")) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/zoneSetId/type", instanceLocation: "#/zoneSetId" }]
      return false
    }
  }
  if (!(typeof data.lastNodeId === "string")) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/lastNodeId/type", instanceLocation: "#/lastNodeId" }]
    return false
  }
  if (!Number.isInteger(data.lastNodeSequenceId)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/lastNodeSequenceId/type", instanceLocation: "#/lastNodeSequenceId" }]
    return false
  }
  if (!(0 <= data.lastNodeSequenceId)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/lastNodeSequenceId/minimum", instanceLocation: "#/lastNodeSequenceId" }]
    return false
  }
  if (!(4294967296 >= data.lastNodeSequenceId)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/lastNodeSequenceId/maximum", instanceLocation: "#/lastNodeSequenceId" }]
    return false
  }
  if (!(typeof data.driving === "boolean")) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/driving/type", instanceLocation: "#/driving" }]
    return false
  }
  if ("paused" in data && hasOwn(data, "paused")) {
    if (!(typeof data.paused === "boolean")) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/paused/type", instanceLocation: "#/paused" }]
      return false
    }
  }
  if ("newBaseRequest" in data && hasOwn(data, "newBaseRequest")) {
    if (!(typeof data.newBaseRequest === "boolean")) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/newBaseRequest/type", instanceLocation: "#/newBaseRequest" }]
      return false
    }
  }
  if ("distanceSinceLastNode" in data && hasOwn(data, "distanceSinceLastNode")) {
    if (!(typeof data.distanceSinceLastNode === "number")) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/distanceSinceLastNode/type", instanceLocation: "#/distanceSinceLastNode" }]
      return false
    }
  }
  if (!(typeof data.operatingMode === "string")) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/operatingMode/type", instanceLocation: "#/operatingMode" }]
    return false
  }
  if (!(data.operatingMode === "AUTOMATIC" || data.operatingMode === "SEMIAUTOMATIC" || data.operatingMode === "MANUAL" || data.operatingMode === "SERVICE" || data.operatingMode === "TEACHIN")) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/operatingMode/enum", instanceLocation: "#/operatingMode" }]
    return false
  }
  if (!Array.isArray(data.nodeStates)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodeStates/type", instanceLocation: "#/nodeStates" }]
    return false
  }
  for (let i = 0; i < data.nodeStates.length; i++) {
    if (i in data.nodeStates && hasOwn(data.nodeStates, i)) {
      if (!(typeof data.nodeStates[i] === "object" && data.nodeStates[i] && !Array.isArray(data.nodeStates[i]))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodeStates/items/type", instanceLocation: "#/nodeStates/"+i }]
        return false
      }
      if (!("nodeId" in data.nodeStates[i] && hasOwn(data.nodeStates[i], "nodeId"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodeStates/items/required", instanceLocation: "#/nodeStates/"+i+"/nodeId" }]
        return false
      }
      if (!("released" in data.nodeStates[i] && hasOwn(data.nodeStates[i], "released"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodeStates/items/required", instanceLocation: "#/nodeStates/"+i+"/released" }]
        return false
      }
      if (!("sequenceId" in data.nodeStates[i] && hasOwn(data.nodeStates[i], "sequenceId"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodeStates/items/required", instanceLocation: "#/nodeStates/"+i+"/sequenceId" }]
        return false
      }
      if (!(typeof data.nodeStates[i].nodeId === "string")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodeStates/items/properties/nodeId/type", instanceLocation: "#/nodeStates/"+i+"/nodeId" }]
        return false
      }
      if (!(Number.isInteger(data.nodeStates[i].sequenceId))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodeStates/items/properties/sequenceId/type", instanceLocation: "#/nodeStates/"+i+"/sequenceId" }]
        return false
      }
      if ("nodeDescription" in data.nodeStates[i] && hasOwn(data.nodeStates[i], "nodeDescription")) {
        if (!(typeof data.nodeStates[i].nodeDescription === "string")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodeStates/items/properties/nodeDescription/type", instanceLocation: "#/nodeStates/"+i+"/nodeDescription" }]
          return false
        }
      }
      if ("nodePosition" in data.nodeStates[i] && hasOwn(data.nodeStates[i], "nodePosition")) {
        const err1 = validate.errors
        const res1 = ref2(data.nodeStates[i].nodePosition)
        const suberr1 = ref2.errors
        validate.errors = err1
        if (!res1) {
          validate.errors = [errorMerge(suberr1[0], "#/allOf/1/properties/nodeStates/items/properties/nodePosition/$ref", "#/nodeStates/"+i+"/nodePosition")]
          return false
        }
      }
      if (!(typeof data.nodeStates[i].released === "boolean")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/nodeStates/items/properties/released/type", instanceLocation: "#/nodeStates/"+i+"/released" }]
        return false
      }
    }
  }
  if (!Array.isArray(data.edgeStates)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/edgeStates/type", instanceLocation: "#/edgeStates" }]
    return false
  }
  for (let j = 0; j < data.edgeStates.length; j++) {
    if (j in data.edgeStates && hasOwn(data.edgeStates, j)) {
      if (!(typeof data.edgeStates[j] === "object" && data.edgeStates[j] && !Array.isArray(data.edgeStates[j]))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edgeStates/items/type", instanceLocation: "#/edgeStates/"+j }]
        return false
      }
      if (!("edgeId" in data.edgeStates[j] && hasOwn(data.edgeStates[j], "edgeId"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edgeStates/items/required", instanceLocation: "#/edgeStates/"+j+"/edgeId" }]
        return false
      }
      if (!("sequenceId" in data.edgeStates[j] && hasOwn(data.edgeStates[j], "sequenceId"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edgeStates/items/required", instanceLocation: "#/edgeStates/"+j+"/sequenceId" }]
        return false
      }
      if (!("released" in data.edgeStates[j] && hasOwn(data.edgeStates[j], "released"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edgeStates/items/required", instanceLocation: "#/edgeStates/"+j+"/released" }]
        return false
      }
      if (!(typeof data.edgeStates[j].edgeId === "string")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edgeStates/items/properties/edgeId/type", instanceLocation: "#/edgeStates/"+j+"/edgeId" }]
        return false
      }
      if (!(Number.isInteger(data.edgeStates[j].sequenceId))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edgeStates/items/properties/sequenceId/type", instanceLocation: "#/edgeStates/"+j+"/sequenceId" }]
        return false
      }
      if ("edgeDescription" in data.edgeStates[j] && hasOwn(data.edgeStates[j], "edgeDescription")) {
        if (!(typeof data.edgeStates[j].edgeDescription === "string")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/edgeStates/items/properties/edgeDescription/type", instanceLocation: "#/edgeStates/"+j+"/edgeDescription" }]
          return false
        }
      }
      if (!(typeof data.edgeStates[j].released === "boolean")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/edgeStates/items/properties/released/type", instanceLocation: "#/edgeStates/"+j+"/released" }]
        return false
      }
      if ("trajectory" in data.edgeStates[j] && hasOwn(data.edgeStates[j], "trajectory")) {
        const err2 = validate.errors
        const res2 = ref3(data.edgeStates[j].trajectory)
        const suberr2 = ref3.errors
        validate.errors = err2
        if (!res2) {
          validate.errors = [errorMerge(suberr2[0], "#/allOf/1/properties/edgeStates/items/properties/trajectory/$ref", "#/edgeStates/"+j+"/trajectory")]
          return false
        }
      }
    }
  }
  if ("agvPosition" in data && hasOwn(data, "agvPosition")) {
    const err3 = validate.errors
    const res3 = ref4(data.agvPosition)
    const suberr3 = ref4.errors
    validate.errors = err3
    if (!res3) {
      validate.errors = [errorMerge(suberr3[0], "#/allOf/1/properties/agvPosition/$ref", "#/agvPosition")]
      return false
    }
  }
  if ("velocity" in data && hasOwn(data, "velocity")) {
    const err4 = validate.errors
    const res4 = ref5(data.velocity)
    const suberr4 = ref5.errors
    validate.errors = err4
    if (!res4) {
      validate.errors = [errorMerge(suberr4[0], "#/allOf/1/properties/velocity/$ref", "#/velocity")]
      return false
    }
  }
  if ("loads" in data && hasOwn(data, "loads")) {
    if (!Array.isArray(data.loads)) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/type", instanceLocation: "#/loads" }]
      return false
    }
    for (let m = 0; m < data.loads.length; m++) {
      if (m in data.loads && hasOwn(data.loads, m)) {
        if (!(typeof data.loads[m] === "object" && data.loads[m] && !Array.isArray(data.loads[m]))) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/type", instanceLocation: "#/loads/"+m }]
          return false
        }
        if ("loadId" in data.loads[m] && hasOwn(data.loads[m], "loadId")) {
          if (!(typeof data.loads[m].loadId === "string")) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/loadId/type", instanceLocation: "#/loads/"+m+"/loadId" }]
            return false
          }
        }
        if ("loadType" in data.loads[m] && hasOwn(data.loads[m], "loadType")) {
          if (!(typeof data.loads[m].loadType === "string")) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/loadType/type", instanceLocation: "#/loads/"+m+"/loadType" }]
            return false
          }
        }
        if ("loadPosition" in data.loads[m] && hasOwn(data.loads[m], "loadPosition")) {
          if (!(typeof data.loads[m].loadPosition === "string")) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/loadPosition/type", instanceLocation: "#/loads/"+m+"/loadPosition" }]
            return false
          }
        }
        if ("boundingBoxReference" in data.loads[m] && hasOwn(data.loads[m], "boundingBoxReference")) {
          if (!(typeof data.loads[m].boundingBoxReference === "object" && data.loads[m].boundingBoxReference && !Array.isArray(data.loads[m].boundingBoxReference))) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/boundingBoxReference/type", instanceLocation: "#/loads/"+m+"/boundingBoxReference" }]
            return false
          }
          if (!("x" in data.loads[m].boundingBoxReference && hasOwn(data.loads[m].boundingBoxReference, "x"))) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/boundingBoxReference/required", instanceLocation: "#/loads/"+m+"/boundingBoxReference/x" }]
            return false
          }
          if (!("y" in data.loads[m].boundingBoxReference && hasOwn(data.loads[m].boundingBoxReference, "y"))) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/boundingBoxReference/required", instanceLocation: "#/loads/"+m+"/boundingBoxReference/y" }]
            return false
          }
          if (!("z" in data.loads[m].boundingBoxReference && hasOwn(data.loads[m].boundingBoxReference, "z"))) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/boundingBoxReference/required", instanceLocation: "#/loads/"+m+"/boundingBoxReference/z" }]
            return false
          }
          if (!(typeof data.loads[m].boundingBoxReference.x === "number")) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/boundingBoxReference/properties/x/type", instanceLocation: "#/loads/"+m+"/boundingBoxReference/x" }]
            return false
          }
          if (!(typeof data.loads[m].boundingBoxReference.y === "number")) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/boundingBoxReference/properties/y/type", instanceLocation: "#/loads/"+m+"/boundingBoxReference/y" }]
            return false
          }
          if (!(typeof data.loads[m].boundingBoxReference.z === "number")) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/boundingBoxReference/properties/z/type", instanceLocation: "#/loads/"+m+"/boundingBoxReference/z" }]
            return false
          }
          if ("theta" in data.loads[m].boundingBoxReference && hasOwn(data.loads[m].boundingBoxReference, "theta")) {
            if (!(typeof data.loads[m].boundingBoxReference.theta === "number")) {
              validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/boundingBoxReference/properties/theta/type", instanceLocation: "#/loads/"+m+"/boundingBoxReference/theta" }]
              return false
            }
          }
        }
        if ("loadDimensions" in data.loads[m] && hasOwn(data.loads[m], "loadDimensions")) {
          if (!(typeof data.loads[m].loadDimensions === "object" && data.loads[m].loadDimensions && !Array.isArray(data.loads[m].loadDimensions))) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/loadDimensions/type", instanceLocation: "#/loads/"+m+"/loadDimensions" }]
            return false
          }
          if (!("length" in data.loads[m].loadDimensions && hasOwn(data.loads[m].loadDimensions, "length"))) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/loadDimensions/required", instanceLocation: "#/loads/"+m+"/loadDimensions/length" }]
            return false
          }
          if (!("width" in data.loads[m].loadDimensions && hasOwn(data.loads[m].loadDimensions, "width"))) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/loadDimensions/required", instanceLocation: "#/loads/"+m+"/loadDimensions/width" }]
            return false
          }
          if (!(typeof data.loads[m].loadDimensions.length === "number")) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/loadDimensions/properties/length/type", instanceLocation: "#/loads/"+m+"/loadDimensions/length" }]
            return false
          }
          if (!(typeof data.loads[m].loadDimensions.width === "number")) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/loadDimensions/properties/width/type", instanceLocation: "#/loads/"+m+"/loadDimensions/width" }]
            return false
          }
          if ("height" in data.loads[m].loadDimensions && hasOwn(data.loads[m].loadDimensions, "height")) {
            if (!(typeof data.loads[m].loadDimensions.height === "number")) {
              validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/loadDimensions/properties/height/type", instanceLocation: "#/loads/"+m+"/loadDimensions/height" }]
              return false
            }
          }
        }
        if ("weight" in data.loads[m] && hasOwn(data.loads[m], "weight")) {
          if (!(typeof data.loads[m].weight === "number")) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/loads/items/properties/weight/type", instanceLocation: "#/loads/"+m+"/weight" }]
            return false
          }
        }
      }
    }
  }
  if (!Array.isArray(data.actionStates)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/actionStates/type", instanceLocation: "#/actionStates" }]
    return false
  }
  for (let n = 0; n < data.actionStates.length; n++) {
    if (n in data.actionStates && hasOwn(data.actionStates, n)) {
      if (!(typeof data.actionStates[n] === "object" && data.actionStates[n] && !Array.isArray(data.actionStates[n]))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/actionStates/items/type", instanceLocation: "#/actionStates/"+n }]
        return false
      }
      if (!("actionId" in data.actionStates[n] && hasOwn(data.actionStates[n], "actionId"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/actionStates/items/required", instanceLocation: "#/actionStates/"+n+"/actionId" }]
        return false
      }
      if (!("actionStatus" in data.actionStates[n] && hasOwn(data.actionStates[n], "actionStatus"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/actionStates/items/required", instanceLocation: "#/actionStates/"+n+"/actionStatus" }]
        return false
      }
      if (!(typeof data.actionStates[n].actionId === "string")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/actionStates/items/properties/actionId/type", instanceLocation: "#/actionStates/"+n+"/actionId" }]
        return false
      }
      if ("actionType" in data.actionStates[n] && hasOwn(data.actionStates[n], "actionType")) {
        if (!(typeof data.actionStates[n].actionType === "string")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/actionStates/items/properties/actionType/type", instanceLocation: "#/actionStates/"+n+"/actionType" }]
          return false
        }
      }
      if ("actionDescription" in data.actionStates[n] && hasOwn(data.actionStates[n], "actionDescription")) {
        if (!(typeof data.actionStates[n].actionDescription === "string")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/actionStates/items/properties/actionDescription/type", instanceLocation: "#/actionStates/"+n+"/actionDescription" }]
          return false
        }
      }
      if (!(typeof data.actionStates[n].actionStatus === "string")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/actionStates/items/properties/actionStatus/type", instanceLocation: "#/actionStates/"+n+"/actionStatus" }]
        return false
      }
      if (!(data.actionStates[n].actionStatus === "WAITING" || data.actionStates[n].actionStatus === "INITIALIZING" || data.actionStates[n].actionStatus === "PAUSED" || data.actionStates[n].actionStatus === "RUNNING" || data.actionStates[n].actionStatus === "FINISHED" || data.actionStates[n].actionStatus === "FAILED")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/actionStates/items/properties/actionStatus/enum", instanceLocation: "#/actionStates/"+n+"/actionStatus" }]
        return false
      }
      if ("resultDescription" in data.actionStates[n] && hasOwn(data.actionStates[n], "resultDescription")) {
        if (!(typeof data.actionStates[n].resultDescription === "string")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/actionStates/items/properties/resultDescription/type", instanceLocation: "#/actionStates/"+n+"/resultDescription" }]
          return false
        }
      }
    }
  }
  if (!(typeof data.batteryState === "object" && data.batteryState && !Array.isArray(data.batteryState))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/batteryState/type", instanceLocation: "#/batteryState" }]
    return false
  }
  if (!("batteryCharge" in data.batteryState && hasOwn(data.batteryState, "batteryCharge"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/batteryState/required", instanceLocation: "#/batteryState/batteryCharge" }]
    return false
  }
  if (!("charging" in data.batteryState && hasOwn(data.batteryState, "charging"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/batteryState/required", instanceLocation: "#/batteryState/charging" }]
    return false
  }
  if (!(typeof data.batteryState.batteryCharge === "number")) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/batteryState/properties/batteryCharge/type", instanceLocation: "#/batteryState/batteryCharge" }]
    return false
  }
  if ("batteryVoltage" in data.batteryState && hasOwn(data.batteryState, "batteryVoltage")) {
    if (!(typeof data.batteryState.batteryVoltage === "number")) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/batteryState/properties/batteryVoltage/type", instanceLocation: "#/batteryState/batteryVoltage" }]
      return false
    }
  }
  if ("batteryHealth" in data.batteryState && hasOwn(data.batteryState, "batteryHealth")) {
    if (!Number.isInteger(data.batteryState.batteryHealth)) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/batteryState/properties/batteryHealth/type", instanceLocation: "#/batteryState/batteryHealth" }]
      return false
    }
    if (!(0 <= data.batteryState.batteryHealth)) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/batteryState/properties/batteryHealth/minimum", instanceLocation: "#/batteryState/batteryHealth" }]
      return false
    }
    if (!(100 >= data.batteryState.batteryHealth)) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/batteryState/properties/batteryHealth/maximum", instanceLocation: "#/batteryState/batteryHealth" }]
      return false
    }
  }
  if (!(typeof data.batteryState.charging === "boolean")) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/batteryState/properties/charging/type", instanceLocation: "#/batteryState/charging" }]
    return false
  }
  if ("reach" in data.batteryState && hasOwn(data.batteryState, "reach")) {
    if (!Number.isInteger(data.batteryState.reach)) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/batteryState/properties/reach/type", instanceLocation: "#/batteryState/reach" }]
      return false
    }
    if (!(0 <= data.batteryState.reach)) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/batteryState/properties/reach/minimum", instanceLocation: "#/batteryState/reach" }]
      return false
    }
    if (!(4294967295 >= data.batteryState.reach)) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/batteryState/properties/reach/maximum", instanceLocation: "#/batteryState/reach" }]
      return false
    }
  }
  if (!Array.isArray(data.errors)) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/type", instanceLocation: "#/errors" }]
    return false
  }
  for (let o = 0; o < data.errors.length; o++) {
    if (o in data.errors && hasOwn(data.errors, o)) {
      if (!(typeof data.errors[o] === "object" && data.errors[o] && !Array.isArray(data.errors[o]))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/items/type", instanceLocation: "#/errors/"+o }]
        return false
      }
      if (!("errorType" in data.errors[o] && hasOwn(data.errors[o], "errorType"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/items/required", instanceLocation: "#/errors/"+o+"/errorType" }]
        return false
      }
      if (!("errorLevel" in data.errors[o] && hasOwn(data.errors[o], "errorLevel"))) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/items/required", instanceLocation: "#/errors/"+o+"/errorLevel" }]
        return false
      }
      if (!(typeof data.errors[o].errorType === "string")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/items/properties/errorType/type", instanceLocation: "#/errors/"+o+"/errorType" }]
        return false
      }
      if ("errorReferences" in data.errors[o] && hasOwn(data.errors[o], "errorReferences")) {
        if (!(Array.isArray(data.errors[o].errorReferences))) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/items/properties/errorReferences/type", instanceLocation: "#/errors/"+o+"/errorReferences" }]
          return false
        }
        for (let p = 0; p < data.errors[o].errorReferences.length; p++) {
          if (p in data.errors[o].errorReferences && hasOwn(data.errors[o].errorReferences, p)) {
            if (!(typeof data.errors[o].errorReferences[p] === "object" && data.errors[o].errorReferences[p] && !Array.isArray(data.errors[o].errorReferences[p]))) {
              validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/items/properties/errorReferences/items/type", instanceLocation: "#/errors/"+o+"errorReferences/"+p }]
              return false
            }
            if (!("referenceKey" in data.errors[o].errorReferences[p] && hasOwn(data.errors[o].errorReferences[p], "referenceKey"))) {
              validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/items/properties/errorReferences/items/required", instanceLocation: "#/errors/"+o+"errorReferences/"+p+"/referenceKey" }]
              return false
            }
            if (!("referenceValue" in data.errors[o].errorReferences[p] && hasOwn(data.errors[o].errorReferences[p], "referenceValue"))) {
              validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/items/properties/errorReferences/items/required", instanceLocation: "#/errors/"+o+"errorReferences/"+p+"/referenceValue" }]
              return false
            }
            if (!(typeof data.errors[o].errorReferences[p].referenceKey === "string")) {
              validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/items/properties/errorReferences/items/properties/referenceKey/type", instanceLocation: "#/errors/"+o+"errorReferences/"+p+"/referenceKey" }]
              return false
            }
            if (!(typeof data.errors[o].errorReferences[p].referenceValue === "string")) {
              validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/items/properties/errorReferences/items/properties/referenceValue/type", instanceLocation: "#/errors/"+o+"errorReferences/"+p+"/referenceValue" }]
              return false
            }
          }
        }
      }
      if ("errorDescription" in data.errors[o] && hasOwn(data.errors[o], "errorDescription")) {
        if (!(typeof data.errors[o].errorDescription === "string")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/items/properties/errorDescription/type", instanceLocation: "#/errors/"+o+"/errorDescription" }]
          return false
        }
      }
      if (!(typeof data.errors[o].errorLevel === "string")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/items/properties/errorLevel/type", instanceLocation: "#/errors/"+o+"/errorLevel" }]
        return false
      }
      if (!(data.errors[o].errorLevel === "WARNING" || data.errors[o].errorLevel === "FATAL")) {
        validate.errors = [{ keywordLocation: "#/allOf/1/properties/errors/items/properties/errorLevel/enum", instanceLocation: "#/errors/"+o+"/errorLevel" }]
        return false
      }
    }
  }
  if ("information" in data && hasOwn(data, "information")) {
    if (!Array.isArray(data.information)) {
      validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/type", instanceLocation: "#/information" }]
      return false
    }
    for (let q = 0; q < data.information.length; q++) {
      if (q in data.information && hasOwn(data.information, q)) {
        if (!(typeof data.information[q] === "object" && data.information[q] && !Array.isArray(data.information[q]))) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/items/type", instanceLocation: "#/information/"+q }]
          return false
        }
        if (!("infoType" in data.information[q] && hasOwn(data.information[q], "infoType"))) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/items/required", instanceLocation: "#/information/"+q+"/infoType" }]
          return false
        }
        if (!("infoLevel" in data.information[q] && hasOwn(data.information[q], "infoLevel"))) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/items/required", instanceLocation: "#/information/"+q+"/infoLevel" }]
          return false
        }
        if (!(typeof data.information[q].infoType === "string")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/items/properties/infoType/type", instanceLocation: "#/information/"+q+"/infoType" }]
          return false
        }
        if ("infoReferences" in data.information[q] && hasOwn(data.information[q], "infoReferences")) {
          if (!(Array.isArray(data.information[q].infoReferences))) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/items/properties/infoReferences/type", instanceLocation: "#/information/"+q+"/infoReferences" }]
            return false
          }
          for (let r = 0; r < data.information[q].infoReferences.length; r++) {
            if (r in data.information[q].infoReferences && hasOwn(data.information[q].infoReferences, r)) {
              if (!(typeof data.information[q].infoReferences[r] === "object" && data.information[q].infoReferences[r] && !Array.isArray(data.information[q].infoReferences[r]))) {
                validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/items/properties/infoReferences/items/type", instanceLocation: "#/information/"+q+"infoReferences/"+r }]
                return false
              }
              if (!("referenceKey" in data.information[q].infoReferences[r] && hasOwn(data.information[q].infoReferences[r], "referenceKey"))) {
                validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/items/properties/infoReferences/items/required", instanceLocation: "#/information/"+q+"infoReferences/"+r+"/referenceKey" }]
                return false
              }
              if (!("referenceValue" in data.information[q].infoReferences[r] && hasOwn(data.information[q].infoReferences[r], "referenceValue"))) {
                validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/items/properties/infoReferences/items/required", instanceLocation: "#/information/"+q+"infoReferences/"+r+"/referenceValue" }]
                return false
              }
              if (!(typeof data.information[q].infoReferences[r].referenceKey === "string")) {
                validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/items/properties/infoReferences/items/properties/referenceKey/type", instanceLocation: "#/information/"+q+"infoReferences/"+r+"/referenceKey" }]
                return false
              }
              if (!(typeof data.information[q].infoReferences[r].referenceValue === "string")) {
                validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/items/properties/infoReferences/items/properties/referenceValue/type", instanceLocation: "#/information/"+q+"infoReferences/"+r+"/referenceValue" }]
                return false
              }
            }
          }
        }
        if ("infoDescription" in data.information[q] && hasOwn(data.information[q], "infoDescription")) {
          if (!(typeof data.information[q].infoDescription === "string")) {
            validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/items/properties/infoDescription/type", instanceLocation: "#/information/"+q+"/infoDescription" }]
            return false
          }
        }
        if (!(typeof data.information[q].infoLevel === "string")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/items/properties/infoLevel/type", instanceLocation: "#/information/"+q+"/infoLevel" }]
          return false
        }
        if (!(data.information[q].infoLevel === "INFO" || data.information[q].infoLevel === "DEBUG")) {
          validate.errors = [{ keywordLocation: "#/allOf/1/properties/information/items/properties/infoLevel/enum", instanceLocation: "#/information/"+q+"/infoLevel" }]
          return false
        }
      }
    }
  }
  if (!(typeof data.safetyState === "object" && data.safetyState && !Array.isArray(data.safetyState))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/safetyState/type", instanceLocation: "#/safetyState" }]
    return false
  }
  if (!("eStop" in data.safetyState && hasOwn(data.safetyState, "eStop"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/safetyState/required", instanceLocation: "#/safetyState/eStop" }]
    return false
  }
  if (!("fieldViolation" in data.safetyState && hasOwn(data.safetyState, "fieldViolation"))) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/safetyState/required", instanceLocation: "#/safetyState/fieldViolation" }]
    return false
  }
  if (!(typeof data.safetyState.eStop === "string")) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/safetyState/properties/eStop/type", instanceLocation: "#/safetyState/eStop" }]
    return false
  }
  if (!(data.safetyState.eStop === "AUTOACK" || data.safetyState.eStop === "MANUAL" || data.safetyState.eStop === "REMOTE" || data.safetyState.eStop === "NONE")) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/safetyState/properties/eStop/enum", instanceLocation: "#/safetyState/eStop" }]
    return false
  }
  if (!(typeof data.safetyState.fieldViolation === "boolean")) {
    validate.errors = [{ keywordLocation: "#/allOf/1/properties/safetyState/properties/fieldViolation/type", instanceLocation: "#/safetyState/fieldViolation" }]
    return false
  }
  return true
};
return ref0})();

const validateVisualization = (function() {
'use strict'
const hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);
const format0 = (input) => {
    if (input.length > 10 + 1 + 9 + 12 + 6) return false
    const full = /^\d\d\d\d-(?:0[1-9]|1[0-2])-(?:[0-2]\d|3[01])[t\s](?:2[0-3]|[0-1]\d):[0-5]\d:(?:[0-5]\d|60)(?:\.\d+)?(?:z|[+-](?:2[0-3]|[0-1]\d)(?::?[0-5]\d)?)$/i
    const feb = input[5] === '0' && input[6] === '2'
    if ((feb && input[8] === '3') || !full.test(input)) return false
    if (input[17] === '6') {
      const p = input.slice(11).match(/([0-9.]+|[^0-9.])/g)
      let hm = Number(p[0]) * 60 + Number(p[2])
      if (p[5] === '+') hm += 24 * 60 - Number(p[6] || 0) * 60 - Number(p[8] || 0)
      else if (p[5] === '-') hm += Number(p[6] || 0) * 60 + Number(p[8] || 0)
      if (hm % (24 * 60) !== 23 * 60 + 59) return false
    }
    if (feb) {
      if (/^\d\d\d\d-02-(?:[012][1-8]|[12]0|[01]9)/.test(input)) return true
      const matches = input.match(/^(\d\d\d\d)-02-29/)
      if (!matches) return false
      const year = matches[1] | 0
      return year % 16 === 0 || (year % 4 === 0 && year % 25 !== 0)
    }
    if (input[8] === '3' && input[9] === '1') return /^\d\d\d\d-(?:0[13578]|1[02])-31/.test(input)
    return /^\d\d\d\d-(?:0[13-9]|1[012])-(?:[012][1-9]|[123]0)/.test(input)
  };
const ref1 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("headerId" in data && hasOwn(data, "headerId"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/headerId" }]
    return false
  }
  if (!("timestamp" in data && hasOwn(data, "timestamp"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!("version" in data && hasOwn(data, "version"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/version" }]
    return false
  }
  if (!("manufacturer" in data && hasOwn(data, "manufacturer"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/manufacturer" }]
    return false
  }
  if (!("serialNumber" in data && hasOwn(data, "serialNumber"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/serialNumber" }]
    return false
  }
  if (!Number.isInteger(data.headerId)) {
    validate.errors = [{ keywordLocation: "#/properties/headerId/type", instanceLocation: "#/headerId" }]
    return false
  }
  if (!(typeof data.timestamp === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/timestamp/type", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!format0(data.timestamp)) {
    validate.errors = [{ keywordLocation: "#/properties/timestamp/format", instanceLocation: "#/timestamp" }]
    return false
  }
  if (!(typeof data.version === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/version/type", instanceLocation: "#/version" }]
    return false
  }
  if (!(typeof data.manufacturer === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/manufacturer/type", instanceLocation: "#/manufacturer" }]
    return false
  }
  if (!(typeof data.serialNumber === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/serialNumber/type", instanceLocation: "#/serialNumber" }]
    return false
  }
  return true
};
const errorMerge = ({ keywordLocation, instanceLocation }, schemaBase, dataBase) => ({
  keywordLocation: `${schemaBase}${keywordLocation.slice(1)}`,
  instanceLocation: `${dataBase}${instanceLocation.slice(1)}`,
});
const ref2 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if (!("x" in data && hasOwn(data, "x"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/x" }]
    return false
  }
  if (!("y" in data && hasOwn(data, "y"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/y" }]
    return false
  }
  if (!("theta" in data && hasOwn(data, "theta"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/theta" }]
    return false
  }
  if (!("mapId" in data && hasOwn(data, "mapId"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/mapId" }]
    return false
  }
  if (!("positionInitialized" in data && hasOwn(data, "positionInitialized"))) {
    validate.errors = [{ keywordLocation: "#/required", instanceLocation: "#/positionInitialized" }]
    return false
  }
  if (!(typeof data.x === "number")) {
    validate.errors = [{ keywordLocation: "#/properties/x/type", instanceLocation: "#/x" }]
    return false
  }
  if (!(typeof data.y === "number")) {
    validate.errors = [{ keywordLocation: "#/properties/y/type", instanceLocation: "#/y" }]
    return false
  }
  if (!(typeof data.theta === "number")) {
    validate.errors = [{ keywordLocation: "#/properties/theta/type", instanceLocation: "#/theta" }]
    return false
  }
  if (!(typeof data.mapId === "string")) {
    validate.errors = [{ keywordLocation: "#/properties/mapId/type", instanceLocation: "#/mapId" }]
    return false
  }
  if ("mapDescription" in data && hasOwn(data, "mapDescription")) {
    if (!(typeof data.mapDescription === "string")) {
      validate.errors = [{ keywordLocation: "#/properties/mapDescription/type", instanceLocation: "#/mapDescription" }]
      return false
    }
  }
  if (!(typeof data.positionInitialized === "boolean")) {
    validate.errors = [{ keywordLocation: "#/properties/positionInitialized/type", instanceLocation: "#/positionInitialized" }]
    return false
  }
  if ("localizationScore" in data && hasOwn(data, "localizationScore")) {
    if (!(typeof data.localizationScore === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/localizationScore/type", instanceLocation: "#/localizationScore" }]
      return false
    }
    if (!(0 <= data.localizationScore)) {
      validate.errors = [{ keywordLocation: "#/properties/localizationScore/minimum", instanceLocation: "#/localizationScore" }]
      return false
    }
    if (!(1 >= data.localizationScore)) {
      validate.errors = [{ keywordLocation: "#/properties/localizationScore/maximum", instanceLocation: "#/localizationScore" }]
      return false
    }
  }
  if ("deviationRange" in data && hasOwn(data, "deviationRange")) {
    if (!(typeof data.deviationRange === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/deviationRange/type", instanceLocation: "#/deviationRange" }]
      return false
    }
  }
  return true
};
const ref3 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  if ("vx" in data && hasOwn(data, "vx")) {
    if (!(typeof data.vx === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/vx/type", instanceLocation: "#/vx" }]
      return false
    }
  }
  if ("vy" in data && hasOwn(data, "vy")) {
    if (!(typeof data.vy === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/vy/type", instanceLocation: "#/vy" }]
      return false
    }
  }
  if ("omega" in data && hasOwn(data, "omega")) {
    if (!(typeof data.omega === "number")) {
      validate.errors = [{ keywordLocation: "#/properties/omega/type", instanceLocation: "#/omega" }]
      return false
    }
  }
  return true
};
const ref0 = function validate(data) {
  validate.errors = null
  if (!(typeof data === "object" && data && !Array.isArray(data))) {
    validate.errors = [{ keywordLocation: "#/type", instanceLocation: "#" }]
    return false
  }
  const err0 = validate.errors
  const res0 = ref1(data)
  const suberr0 = ref1.errors
  validate.errors = err0
  if (!res0) {
    validate.errors = [errorMerge(suberr0[0], "#/allOf/0/$ref", "#")]
    return false
  }
  if ("agvPosition" in data && hasOwn(data, "agvPosition")) {
    const err1 = validate.errors
    const res1 = ref2(data.agvPosition)
    const suberr1 = ref2.errors
    validate.errors = err1
    if (!res1) {
      validate.errors = [errorMerge(suberr1[0], "#/allOf/1/properties/agvPosition/$ref", "#/agvPosition")]
      return false
    }
  }
  if ("velocity" in data && hasOwn(data, "velocity")) {
    const err2 = validate.errors
    const res2 = ref3(data.velocity)
    const suberr2 = ref3.errors
    validate.errors = err2
    if (!res2) {
      validate.errors = [errorMerge(suberr2[0], "#/allOf/1/properties/velocity/$ref", "#/velocity")]
      return false
    }
  }
  return true
};
return ref0})();
module.exports = { validateConnection, validateHeader, validateInstantActions, validateOrder, validateState, validateVisualization };